package com.pitchenga;

import java.util.List;
import java.util.function.Function;

import static com.pitchenga.Pitch.*;

public enum Riddler {
    ChromaticOneOctave("Chromatic - 1 octave",
            new Pitch[][]{Pitchenga.CHROMATIC_SCALE}, Pitchenga::shuffle, new Integer[0]),
    Chromatic("Chromatic - main octaves",
            new Pitch[][]{Pitchenga.CHROMATIC_SCALE}, Pitchenga::shuffle, null),
    DoMajOneOctave("Do maj - 1 octave",
            new Pitch[][]{Pitchenga.DO_MAJ_SCALE}, Pitchenga::shuffle, new Integer[0]),
    DoMaj("Do maj - main octaves",
            new Pitch[][]{Pitchenga.DO_MAJ_SCALE}, Pitchenga::shuffle, null),
    //        DoMajHarm("Do maj harm - main octaves",
//                new Pitch[][]{DO_MAJ_HARM_SCALE}, Pitchenga::shuffle, null),
//        RaMaj("Ra maj - main octaves",
//                new Pitch[][]{transposeScale(DO_MAJ_SCALE, 0, 1)}, Pitchenga::shuffle, null),
//        RaMajHarm("Ra maj harm - main octaves",
//                new Pitch[][]{transposeScale(DO_MAJ_HARM_SCALE, 0, 1)}, Pitchenga::shuffle, null),
//        ReMaj("Re maj - main octaves",
//                new Pitch[][]{transposeScale(DO_MAJ_SCALE, 0, 2)}, Pitchenga::shuffle, null),
//        ReMajHarm("Re maj harm - main octaves",
//                new Pitch[][]{transposeScale(DO_MAJ_HARM_SCALE, 0, 2)}, Pitchenga::shuffle, null),
//        MeMaj("Me maj - main octaves",
//                new Pitch[][]{transposeScale(DO_MAJ_SCALE, 0, 3)}, Pitchenga::shuffle, null),
//        MeMajHarm("Me maj harm - main octaves",
//                new Pitch[][]{transposeScale(DO_MAJ_HARM_SCALE, 0, 3)}, Pitchenga::shuffle, null),
//        MiMaj("Mi maj - main octaves",
//                new Pitch[][]{transposeScale(DO_MAJ_SCALE, 0, 4)}, Pitchenga::shuffle, null),
//        MiMajHarm("Mi maj harm - main octaves",
//                new Pitch[][]{transposeScale(DO_MAJ_HARM_SCALE, 0, 4)}, Pitchenga::shuffle, null),
//        FaMaj("Fa maj - main octaves",
//                new Pitch[][]{transposeScale(DO_MAJ_SCALE, 0, 5)}, Pitchenga::shuffle, null),
//        FaMajHarm("Fa maj harm - main octaves",
//                new Pitch[][]{transposeScale(DO_MAJ_HARM_SCALE, 0, 5)}, Pitchenga::shuffle, null),
//        FiMaj("Fi maj - main octaves",
//                new Pitch[][]{transposeScale(DO_MAJ_SCALE, 0, 6)}, Pitchenga::shuffle, null),
//        FiMajHarm("Fi maj harm - main octaves",
//                new Pitch[][]{transposeScale(DO_MAJ_HARM_SCALE, 0, 6)}, Pitchenga::shuffle, null),
//        SoMaj("So maj - main octaves",
//                new Pitch[][]{transposeScale(DO_MAJ_SCALE, 0, 7)}, Pitchenga::shuffle, null),
//        SoMajHarm("So maj harm - main octaves",
//                new Pitch[][]{transposeScale(DO_MAJ_HARM_SCALE, 0, 7)}, Pitchenga::shuffle, null),
//        LeMaj("Le maj - main octaves",
//                new Pitch[][]{transposeScale(DO_MAJ_SCALE, 0, 8)}, Pitchenga::shuffle, null),
//        LeMajHarm("Le maj harm - main octaves",
//                new Pitch[][]{transposeScale(DO_MAJ_HARM_SCALE, 0, 8)}, Pitchenga::shuffle, null),
//        LaMaj("La maj - main octaves",
//                new Pitch[][]{transposeScale(DO_MAJ_SCALE, 0, 9)}, Pitchenga::shuffle, null),
//        LaMajHarm("La maj harm - main octaves",
//                new Pitch[][]{transposeScale(DO_MAJ_HARM_SCALE, 0, 9)}, Pitchenga::shuffle, null),
//        SeMaj("Se maj - main octaves",
//                new Pitch[][]{transposeScale(DO_MAJ_SCALE, 0, 10)}, Pitchenga::shuffle, null),
//        SeMajHarm("Se maj harm - main octaves",
//                new Pitch[][]{transposeScale(DO_MAJ_HARM_SCALE, 0, 10)}, Pitchenga::shuffle, null),
//        SiMaj("Si maj - main octaves",
//                new Pitch[][]{transposeScale(DO_MAJ_SCALE, 0, 11)}, Pitchenga::shuffle, null),
//        SiMajHarm("Si maj harm - main octaves",
//                new Pitch[][]{transposeScale(DO_MAJ_HARM_SCALE, 0, 11)}, Pitchenga::shuffle, null),
    ChromaticScaleUpDown("Chromatic scale Mi3-La5-Mi3",
            Pitchenga.CHROMATIC_SCALE_MI3_LA5_MI3, Pitchenga::ordered, new Integer[]{3, 4, 5}),
    ChromaticScaleUpDownUp("Chromatic scale Mi3-Le5-Mi3 extended",
            Pitchenga.CHROMATIC_SCALE_MI3_LA5_MI3_UP_DOWN_UP, Pitchenga::ordered, new Integer[]{3, 4, 5}),

    Step01Do4Do5Fi4La4("Step 1: Do4, Do5, Fi4, La4",
            new Pitch[][]{{Do4, Do5, Fi4, La4}}, Pitchenga::shuffle, new Integer[0]),
    Step02Me4("Step 2: Me4",
            new Pitch[][]{{Do4, Do5, Fi4, La4, Me4}}, Pitchenga::shuffle, new Integer[0]),
    Step03Ra4("Step 3: Ra4",
            new Pitch[][]{{Do4, Do5, Fi4, La4, Me4, Ra4}}, Pitchenga::shuffle, new Integer[0]),
    Step04So4("Step 4: So4",
            new Pitch[][]{{Do4, Do5, Fi4, Fi4, La4, Me4, Ra4, So4}}, Pitchenga::shuffle, new Integer[0]),
    Step05Se4("Step 5: Se4",
            new Pitch[][]{{Do4, Do5, Fi4, La4, La4, Me4, Ra4, So4, Se4, Se4}}, Pitchenga::shuffle, new Integer[0]),
    Step06Mi4("Step 6: Mi4",
            new Pitch[][]{{Do4, Do5, Fi4, La4, Me4, Me4, Ra4, So4, Se4, Mi4, Mi4, Mi4}}, Pitchenga::shuffle, new Integer[0]),
    Step07Le4("Step 7: Le4",
            new Pitch[][]{{Do4, Do5, Fi4, La4, La4, La4, Me4, Ra4, So4, So4, So4, Se4, Mi4, Mi4, Le4, Le4, Le4, Le4}}, Pitchenga::shuffle, new Integer[0]),
    Step08Re4("Step 8: Re4",
            new Pitch[][]{{Do4, Do5, Fi4, La4, Me4, Me4, Me4, Ra4, Ra4, Ra4, So4, Se4, Mi4, Le4, Le4, Re4, Re4, Re4, Re4, Re4}}, Pitchenga::shuffle, new Integer[0]),
    Step09Si4("Step 9: Si4",
            new Pitch[][]{{Do4, Do5, Do5, Fi4, La4, Me4, Ra4, So4, Se4, Se4, Se4, Mi4, Le4, Re4, Re4, Si4, Si4, Si4, Si4, Si4}}, Pitchenga::shuffle, new Integer[0]),
    Step10Fa4("Step 10: Fa4",
            new Pitch[][]{{Do4, Do5, Fi4, Fi4, Fi4, La4, Me4, Ra4, So4, Se4, Mi4, Mi4, Mi4, Le4, Re4, Si4, Si4, Fa4, Fa4, Fa4, Fa4, Fa4, Fa4}}, Pitchenga::shuffle, new Integer[0]),
    Step11Do3Do4Fi3La3("Step 11: Do3, Do4, Fi3, La3",
            new Pitch[][]{{Do3, Do4, Fi3, La3}}, Pitchenga::shuffle, new Integer[0]),
    Step12Me3("Step 12: Me3",
            new Pitch[][]{{Do3, Do4, Fi3, La3, Me3}}, Pitchenga::shuffle, new Integer[0]),
    Step13Fa3("Step 13: Fa3",
            new Pitch[][]{{Do3, Do4, Fi3, La3, Me3, Fa3}}, Pitchenga::shuffle, new Integer[0]),
    Step14Si3("Step 14: Si3",
            new Pitch[][]{{Do3, Do4, Fi3, Fi3, La3, Me3, Fa3, Fa3, Si3, Si3}}, Pitchenga::shuffle, new Integer[0]),
    Step15Re3("Step 15: Re3",
            new Pitch[][]{{Do3, Do4, Fi3, La3, Me3, Me3, Fa3, Si3, Re3, Re3}}, Pitchenga::shuffle, new Integer[0]),
    Step16Le3("Step 16: Le3",
            new Pitch[][]{{Do3, Do4, Fi3, Fi3, La3, La3, Me3, Fa3, Fa3, Si3, Re3, Le3, Le3, Le3}}, Pitchenga::shuffle, new Integer[0]),
    Step17Mi3("Step 17: Mi3",
            new Pitch[][]{{Do3, Do4, Fi3, La3, Me3, Me3, Me3, Fa3, Fa3, Fa3, Si3, Re3, Le3, Mi3, Mi3, Mi3, Mi3}}, Pitchenga::shuffle, new Integer[0]),
    Step18Se3("Step 18: Se3",
            new Pitch[][]{{Do3, Do4, Fi3, La3, La3, La3, Me3, Fa3, Si3, Si3, Si3, Re3, Le3, Mi3, Se3, Se3, Se3, Se3, Se3}}, Pitchenga::shuffle, new Integer[0]),
    Step19So3("Step 19: So3",
            new Pitch[][]{{Do3, Do4, Fi3, Fi3, Fi3, La3, Me3, Fa3, Si3, Re3, Le3, Le3, Le3, Mi3, Se3, So3, So3, So3, So3, So3}}, Pitchenga::shuffle, new Integer[0]),
    Step20Ra3("Step 20: Ra3",
            new Pitch[][]{{Do3, Do3, Do3, Do4, Fi3, La3, Me3, Fa3, Si3, Re3, Re3, Re3, Re3, Le3, Mi3, Se3, So3, Ra3, Ra3, Ra3, Ra3, Ra3, Ra3}}, Pitchenga::shuffle, new Integer[0]),
    Step21Octave3("Step 21: Octave 3 training", new Pitch[][]{
            {Do3, Do4, Fi3, Fi3, Fi3, Fi3, Fi3, Fi3, La3, Me3, Fa3, Fa3, Fa3, Fa3, Fa3, Fa3, Si3, Re3, Le3, Mi3, Mi3, Mi3, Mi3, Mi3, Mi3, Se3, So3, Ra3},
            {Do3, Do4, Fi3, Fi3, Fi3, Fi3, Fi3, Fi3, La3, Me3, Fa3, Fa3, Fa3, Fa3, Fa3, Fa3, Si3, Re3, Le3, Mi3, Mi3, Mi3, Mi3, Mi3, Mi3, Se3, So3, Ra3},
            {Do3, Do4, Fi3, Fi3, Fi3, Fi3, Fi3, Fi3, La3, Me3, Fa3, Fa3, Fa3, Fa3, Fa3, Fa3, Si3, Re3, Le3, Mi3, Mi3, Mi3, Mi3, Mi3, Mi3, Se3, So3, Ra3},
            {Do3, Do4, Do4, Do4, Do4, Do4, Do4, Fi3, La3, Me3, Fa3, Si3, Si3, Si3, Si3, Si3, Si3, Re3, Le3, Mi3, Se3, Se3, Se3, Se3, Se3, Se3, So3, Ra3},
            {Do3, Do4, Do4, Do4, Do4, Do4, Do4, Fi3, La3, Me3, Fa3, Si3, Si3, Si3, Si3, Si3, Si3, Re3, Le3, Mi3, Se3, Se3, Se3, Se3, Se3, Se3, So3, Ra3},
            {Do3, Do4, Do4, Do4, Do4, Do4, Do4, Fi3, La3, Me3, Fa3, Si3, Si3, Si3, Si3, Si3, Si3, Re3, Le3, Mi3, Se3, Se3, Se3, Se3, Se3, Se3, So3, Ra3},
            {Do3, Ra3, Ra3, Ra3, Ra3, Ra3, Ra3, Re3, Re3, Re3, Re3, Re3, Re3, Me3, Me3, Me3, Me3, Me3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
            {Do3, Ra3, Ra3, Ra3, Ra3, Ra3, Ra3, Re3, Re3, Re3, Re3, Re3, Re3, Me3, Me3, Me3, Me3, Me3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
            {Do3, Ra3, Ra3, Ra3, Ra3, Ra3, Ra3, Re3, Re3, Re3, Re3, Re3, Re3, Me3, Me3, Me3, Me3, Me3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, So3, So3, So3, So3, So3, Le3, Le3, Le3, Le3, Le3, Le3, La3, La3, La3, La3, La3, La3, Se3, Si3, Do4},
            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, So3, So3, So3, So3, So3, Le3, Le3, Le3, Le3, Le3, Le3, La3, La3, La3, La3, La3, La3, Se3, Si3, Do4},
            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, So3, So3, So3, So3, So3, Le3, Le3, Le3, Le3, Le3, Le3, La3, La3, La3, La3, La3, La3, Se3, Si3, Do4},
    }, pitchenga -> pitchenga.shuffleGroupSeries(false), new Integer[0]),
    Step22Do2Do3Fi2La2("Step 22: Do2, Do3, Fi2, La2", new Pitch[][]{
            {Do2, Do3, Fi2, La2},
            {Do2, Do3, Fi2, La2},
            {Do2, Do3, Fi2, La2},
            {Do2, Do3, Fi2, La2},
            {Do2, Do3, Fi2, La2},
            {Do2, Do3, Fi2, La2},
            {Do2, Do3, Fi2, La2},
            {Do2, Do3, Fi2, La2},
            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
    }, pitchenga -> pitchenga.shuffleGroupSeries(false), new Integer[0]),
    Step23Me2("Step 23: Me2", new Pitch[][]{
            {Do2, Do3, Fi2, La2, Me2},
            {Do2, Do3, Fi2, La2, Me2},
            {Do2, Do3, Fi2, La2, Me2},
            {Do2, Do3, Fi2, La2, Me2},
            {Do2, Do3, Fi2, La2, Me2},
            {Do2, Do3, Fi2, La2, Me2},
            {Do2, Do3, Fi2, La2, Me2},
            {Do2, Do3, Fi2, La2, Me2},
            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
    }, pitchenga -> pitchenga.shuffleGroupSeries(false), new Integer[0]),
    Step24Fa2("Step 24: Fa2", new Pitch[][]{
            {Do2, Do3, Fi2, La2, Me2, Fa2},
            {Do2, Do3, Fi2, La2, Me2, Fa2},
            {Do2, Do3, Fi2, La2, Me2, Fa2},
            {Do2, Do3, Fi2, La2, Me2, Fa2},
            {Do2, Do3, Fi2, La2, Me2, Fa2},
            {Do2, Do3, Fi2, La2, Me2, Fa2},
            {Do2, Do3, Fi2, La2, Me2, Fa2},
            {Do2, Do3, Fi2, La2, Me2, Fa2},
            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
    }, pitchenga -> pitchenga.shuffleGroupSeries(false), new Integer[0]),
    Step25Si2("Step 25: Si2", new Pitch[][]{
            {Do3, Do4, Fi3, Fi3, Fi3, Fi3, Fi3, Fi3, La3, Me3, Fa3, Fa3, Fa3, Fa3, Fa3, Fa3, Si3, Re3, Le3, Mi3, Mi3, Mi3, Mi3, Mi3, Mi3, Se3, So3, Ra3},
            {Do3, Do4, Fi3, Fi3, Fi3, Fi3, Fi3, Fi3, La3, Me3, Fa3, Fa3, Fa3, Fa3, Fa3, Fa3, Si3, Re3, Le3, Mi3, Mi3, Mi3, Mi3, Mi3, Mi3, Se3, So3, Ra3},
            {Do3, Do4, Do4, Do4, Do4, Do4, Do4, Fi3, La3, Me3, Fa3, Si3, Si3, Si3, Si3, Si3, Si3, Re3, Le3, Mi3, Se3, Se3, Se3, Se3, Se3, Se3, So3, Ra3},
            {Do3, Do4, Do4, Do4, Do4, Do4, Do4, Fi3, La3, Me3, Fa3, Si3, Si3, Si3, Si3, Si3, Si3, Re3, Le3, Mi3, Se3, Se3, Se3, Se3, Se3, Se3, So3, Ra3},
            {Do3, Ra3, Ra3, Ra3, Ra3, Ra3, Ra3, Re3, Re3, Re3, Re3, Re3, Re3, Me3, Me3, Me3, Me3, Me3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
            {Do3, Ra3, Ra3, Ra3, Ra3, Ra3, Ra3, Re3, Re3, Re3, Re3, Re3, Re3, Me3, Me3, Me3, Me3, Me3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, So3, So3, So3, So3, So3, Le3, Le3, Le3, Le3, Le3, Le3, La3, La3, La3, La3, La3, La3, Se3, Si3, Do4},
            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, So3, So3, So3, So3, So3, Le3, Le3, Le3, Le3, Le3, Le3, La3, La3, La3, La3, La3, La3, Se3, Si3, Do4},
            {Do2, Do3, Fi2, Fi2, La2, Me2, Fa2, Fa2, Si2, Si2},
            {Do2, Do3, Fi2, Fi2, La2, Me2, Fa2, Fa2, Si2, Si2},
            {Do2, Do3, Fi2, Fi2, La2, Me2, Fa2, Fa2, Si2, Si2},
            {Do2, Do3, Fi2, Fi2, La2, Me2, Fa2, Fa2, Si2, Si2},
            {Do2, Do3, Fi2, Fi2, La2, Me2, Fa2, Fa2, Si2, Si2},
            {Do2, Do3, Fi2, Fi2, La2, Me2, Fa2, Fa2, Si2, Si2},
            {Do2, Do3, Fi2, Fi2, La2, Me2, Fa2, Fa2, Si2, Si2},
            {Do2, Do3, Fi2, Fi2, La2, Me2, Fa2, Fa2, Si2, Si2},
            {Do2, Do3, Fi2, Fi2, La2, Me2, Fa2, Fa2, Si2, Si2},
            {Do2, Do3, Fi2, Fi2, La2, Me2, Fa2, Fa2, Si2, Si2},
            {Do2, Do3, Fi2, Fi2, La2, Me2, Fa2, Fa2, Si2, Si2},
            {Do2, Do3, Fi2, Fi2, La2, Me2, Fa2, Fa2, Si2, Si2},
            {Do2, Do3, Fi2, Fi2, La2, Me2, Fa2, Fa2, Si2, Si2},
            {Do2, Do3, Fi2, Fi2, La2, Me2, Fa2, Fa2, Si2, Si2},
            {Do2, Do3, Fi2, Fi2, La2, Me2, Fa2, Fa2, Si2, Si2},
            {Do2, Do3, Fi2, Fi2, La2, Me2, Fa2, Fa2, Si2, Si2},
            {Do2, Do3, Fi2, Fi2, La2, Me2, Fa2, Fa2, Si2, Si2},
            {Do2, Do3, Fi2, Fi2, La2, Me2, Fa2, Fa2, Si2, Si2},
            {Do2, Do3, Fi2, Fi2, La2, Me2, Fa2, Fa2, Si2, Si2},
            {Do2, Do3, Fi2, Fi2, La2, Me2, Fa2, Fa2, Si2, Si2},
    }, pitchenga -> pitchenga.shuffleGroupSeries(false), new Integer[0]),
    Step26Re2("Step 26: Re2", new Pitch[][]{
            {Do3, Do4, Fi3, Fi3, Fi3, Fi3, Fi3, Fi3, La3, Me3, Fa3, Fa3, Fa3, Fa3, Fa3, Fa3, Si3, Re3, Le3, Mi3, Mi3, Mi3, Mi3, Mi3, Mi3, Se3, So3, Ra3},
            {Do3, Do4, Fi3, Fi3, Fi3, Fi3, Fi3, Fi3, La3, Me3, Fa3, Fa3, Fa3, Fa3, Fa3, Fa3, Si3, Re3, Le3, Mi3, Mi3, Mi3, Mi3, Mi3, Mi3, Se3, So3, Ra3},
            {Do3, Do4, Do4, Do4, Do4, Do4, Do4, Fi3, La3, Me3, Fa3, Si3, Si3, Si3, Si3, Si3, Si3, Re3, Le3, Mi3, Se3, Se3, Se3, Se3, Se3, Se3, So3, Ra3},
            {Do3, Do4, Do4, Do4, Do4, Do4, Do4, Fi3, La3, Me3, Fa3, Si3, Si3, Si3, Si3, Si3, Si3, Re3, Le3, Mi3, Se3, Se3, Se3, Se3, Se3, Se3, So3, Ra3},
            {Do3, Ra3, Ra3, Ra3, Ra3, Ra3, Ra3, Re3, Re3, Re3, Re3, Re3, Re3, Me3, Me3, Me3, Me3, Me3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
            {Do3, Ra3, Ra3, Ra3, Ra3, Ra3, Ra3, Re3, Re3, Re3, Re3, Re3, Re3, Me3, Me3, Me3, Me3, Me3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, So3, So3, So3, So3, So3, Le3, Le3, Le3, Le3, Le3, Le3, La3, La3, La3, La3, La3, La3, Se3, Si3, Do4},
            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, So3, So3, So3, So3, So3, Le3, Le3, Le3, Le3, Le3, Le3, La3, La3, La3, La3, La3, La3, Se3, Si3, Do4},
            {Do2, Do3, Fi2, La2, Me2, Me2, Fa2, Si2, Re2, Re2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Fa2, Si2, Re2, Re2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Fa2, Si2, Re2, Re2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Fa2, Si2, Re2, Re2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Fa2, Si2, Re2, Re2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Fa2, Si2, Re2, Re2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Fa2, Si2, Re2, Re2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Fa2, Si2, Re2, Re2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Fa2, Si2, Re2, Re2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Fa2, Si2, Re2, Re2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Fa2, Si2, Re2, Re2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Fa2, Si2, Re2, Re2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Fa2, Si2, Re2, Re2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Fa2, Si2, Re2, Re2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Fa2, Si2, Re2, Re2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Fa2, Si2, Re2, Re2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Fa2, Si2, Re2, Re2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Fa2, Si2, Re2, Re2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Fa2, Si2, Re2, Re2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Fa2, Si2, Re2, Re2},
    }, pitchenga -> pitchenga.shuffleGroupSeries(false), new Integer[0]),
    Step27Le2("Step 27: Le2", new Pitch[][]{
            {Do3, Do4, Fi3, Fi3, Fi3, Fi3, Fi3, Fi3, La3, Me3, Fa3, Fa3, Fa3, Fa3, Fa3, Fa3, Si3, Re3, Le3, Mi3, Mi3, Mi3, Mi3, Mi3, Mi3, Se3, So3, Ra3},
            {Do3, Do4, Fi3, Fi3, Fi3, Fi3, Fi3, Fi3, La3, Me3, Fa3, Fa3, Fa3, Fa3, Fa3, Fa3, Si3, Re3, Le3, Mi3, Mi3, Mi3, Mi3, Mi3, Mi3, Se3, So3, Ra3},
            {Do3, Do4, Do4, Do4, Do4, Do4, Do4, Fi3, La3, Me3, Fa3, Si3, Si3, Si3, Si3, Si3, Si3, Re3, Le3, Mi3, Se3, Se3, Se3, Se3, Se3, Se3, So3, Ra3},
            {Do3, Do4, Do4, Do4, Do4, Do4, Do4, Fi3, La3, Me3, Fa3, Si3, Si3, Si3, Si3, Si3, Si3, Re3, Le3, Mi3, Se3, Se3, Se3, Se3, Se3, Se3, So3, Ra3},
            {Do3, Ra3, Ra3, Ra3, Ra3, Ra3, Ra3, Re3, Re3, Re3, Re3, Re3, Re3, Me3, Me3, Me3, Me3, Me3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
            {Do3, Ra3, Ra3, Ra3, Ra3, Ra3, Ra3, Re3, Re3, Re3, Re3, Re3, Re3, Me3, Me3, Me3, Me3, Me3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, So3, So3, So3, So3, So3, Le3, Le3, Le3, Le3, Le3, Le3, La3, La3, La3, La3, La3, La3, Se3, Si3, Do4},
            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, So3, So3, So3, So3, So3, Le3, Le3, Le3, Le3, Le3, Le3, La3, La3, La3, La3, La3, La3, Se3, Si3, Do4},
            {Do2, Do3, Fi2, Fi2, La2, La2, Me2, Fa2, Fa2, Si2, Re2, Le2, Le2, Le2},
            {Do2, Do3, Fi2, Fi2, La2, La2, Me2, Fa2, Fa2, Si2, Re2, Le2, Le2, Le2},
            {Do2, Do3, Fi2, Fi2, La2, La2, Me2, Fa2, Fa2, Si2, Re2, Le2, Le2, Le2},
            {Do2, Do3, Fi2, Fi2, La2, La2, Me2, Fa2, Fa2, Si2, Re2, Le2, Le2, Le2},
            {Do2, Do3, Fi2, Fi2, La2, La2, Me2, Fa2, Fa2, Si2, Re2, Le2, Le2, Le2},
            {Do2, Do3, Fi2, Fi2, La2, La2, Me2, Fa2, Fa2, Si2, Re2, Le2, Le2, Le2},
            {Do2, Do3, Fi2, Fi2, La2, La2, Me2, Fa2, Fa2, Si2, Re2, Le2, Le2, Le2},
            {Do2, Do3, Fi2, Fi2, La2, La2, Me2, Fa2, Fa2, Si2, Re2, Le2, Le2, Le2},
            {Do2, Do3, Fi2, Fi2, La2, La2, Me2, Fa2, Fa2, Si2, Re2, Le2, Le2, Le2},
            {Do2, Do3, Fi2, Fi2, La2, La2, Me2, Fa2, Fa2, Si2, Re2, Le2, Le2, Le2},
            {Do2, Do3, Fi2, Fi2, La2, La2, Me2, Fa2, Fa2, Si2, Re2, Le2, Le2, Le2},
            {Do2, Do3, Fi2, Fi2, La2, La2, Me2, Fa2, Fa2, Si2, Re2, Le2, Le2, Le2},
            {Do2, Do3, Fi2, Fi2, La2, La2, Me2, Fa2, Fa2, Si2, Re2, Le2, Le2, Le2},
            {Do2, Do3, Fi2, Fi2, La2, La2, Me2, Fa2, Fa2, Si2, Re2, Le2, Le2, Le2},
            {Do2, Do3, Fi2, Fi2, La2, La2, Me2, Fa2, Fa2, Si2, Re2, Le2, Le2, Le2},
            {Do2, Do3, Fi2, Fi2, La2, La2, Me2, Fa2, Fa2, Si2, Re2, Le2, Le2, Le2},
            {Do2, Do3, Fi2, Fi2, La2, La2, Me2, Fa2, Fa2, Si2, Re2, Le2, Le2, Le2},
            {Do2, Do3, Fi2, Fi2, La2, La2, Me2, Fa2, Fa2, Si2, Re2, Le2, Le2, Le2},
            {Do2, Do3, Fi2, Fi2, La2, La2, Me2, Fa2, Fa2, Si2, Re2, Le2, Le2, Le2},
            {Do2, Do3, Fi2, Fi2, La2, La2, Me2, Fa2, Fa2, Si2, Re2, Le2, Le2, Le2},
            {Do2, Do3, Fi2, Fi2, La2, La2, Me2, Fa2, Fa2, Si2, Re2, Le2, Le2, Le2},
            {Do2, Do3, Fi2, Fi2, La2, La2, Me2, Fa2, Fa2, Si2, Re2, Le2, Le2, Le2},
            {Do2, Do3, Fi2, Fi2, La2, La2, Me2, Fa2, Fa2, Si2, Re2, Le2, Le2, Le2},
            {Do2, Do3, Fi2, Fi2, La2, La2, Me2, Fa2, Fa2, Si2, Re2, Le2, Le2, Le2},
            {Do2, Do3, Fi2, Fi2, La2, La2, Me2, Fa2, Fa2, Si2, Re2, Le2, Le2, Le2},
            {Do2, Do3, Fi2, Fi2, La2, La2, Me2, Fa2, Fa2, Si2, Re2, Le2, Le2, Le2},
            {Do2, Do3, Fi2, Fi2, La2, La2, Me2, Fa2, Fa2, Si2, Re2, Le2, Le2, Le2},
            {Do2, Do3, Fi2, Fi2, La2, La2, Me2, Fa2, Fa2, Si2, Re2, Le2, Le2, Le2},
            {Do2, Do3, Fi2, Fi2, La2, La2, Me2, Fa2, Fa2, Si2, Re2, Le2, Le2, Le2},
            {Do2, Do3, Fi2, Fi2, La2, La2, Me2, Fa2, Fa2, Si2, Re2, Le2, Le2, Le2},
    }, pitchenga -> pitchenga.shuffleGroupSeries(false), new Integer[0]),
    Step28Mi2("Step 28: Mi2", new Pitch[][]{
            {Do3, Do4, Fi3, Fi3, Fi3, Fi3, Fi3, Fi3, La3, Me3, Fa3, Fa3, Fa3, Fa3, Fa3, Fa3, Si3, Re3, Le3, Mi3, Mi3, Mi3, Mi3, Mi3, Mi3, Se3, So3, Ra3},
            {Do3, Do4, Fi3, Fi3, Fi3, Fi3, Fi3, Fi3, La3, Me3, Fa3, Fa3, Fa3, Fa3, Fa3, Fa3, Si3, Re3, Le3, Mi3, Mi3, Mi3, Mi3, Mi3, Mi3, Se3, So3, Ra3},
            {Do3, Do4, Do4, Do4, Do4, Do4, Do4, Fi3, La3, Me3, Fa3, Si3, Si3, Si3, Si3, Si3, Si3, Re3, Le3, Mi3, Se3, Se3, Se3, Se3, Se3, Se3, So3, Ra3},
            {Do3, Do4, Do4, Do4, Do4, Do4, Do4, Fi3, La3, Me3, Fa3, Si3, Si3, Si3, Si3, Si3, Si3, Re3, Le3, Mi3, Se3, Se3, Se3, Se3, Se3, Se3, So3, Ra3},
            {Do3, Ra3, Ra3, Ra3, Ra3, Ra3, Ra3, Re3, Re3, Re3, Re3, Re3, Re3, Me3, Me3, Me3, Me3, Me3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
            {Do3, Ra3, Ra3, Ra3, Ra3, Ra3, Ra3, Re3, Re3, Re3, Re3, Re3, Re3, Me3, Me3, Me3, Me3, Me3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, So3, So3, So3, So3, So3, Le3, Le3, Le3, Le3, Le3, Le3, La3, La3, La3, La3, La3, La3, Se3, Si3, Do4},
            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, So3, So3, So3, So3, So3, Le3, Le3, Le3, Le3, Le3, Le3, La3, La3, La3, La3, La3, La3, Se3, Si3, Do4},
            {Do2, Do3, Fi2, La2, Me2, Me2, Me2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Me2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Me2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Me2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Me2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Me2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Me2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Me2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Me2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Me2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Me2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Me2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Me2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Me2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Me2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Me2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Me2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Me2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Me2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Me2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Me2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Me2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Me2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Me2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Me2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Me2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Me2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Me2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2},
            {Do2, Do3, Fi2, La2, Me2, Me2, Me2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2},
    }, pitchenga -> pitchenga.shuffleGroupSeries(false), new Integer[0]),
    Step29Se2("Step 29: Se2", new Pitch[][]{
            {Do3, Do4, Fi3, Fi3, Fi3, Fi3, Fi3, Fi3, La3, Me3, Fa3, Fa3, Fa3, Fa3, Fa3, Fa3, Si3, Re3, Le3, Mi3, Mi3, Mi3, Mi3, Mi3, Mi3, Se3, So3, Ra3},
            {Do3, Do4, Fi3, Fi3, Fi3, Fi3, Fi3, Fi3, La3, Me3, Fa3, Fa3, Fa3, Fa3, Fa3, Fa3, Si3, Re3, Le3, Mi3, Mi3, Mi3, Mi3, Mi3, Mi3, Se3, So3, Ra3},
            {Do3, Do4, Do4, Do4, Do4, Do4, Do4, Fi3, La3, Me3, Fa3, Si3, Si3, Si3, Si3, Si3, Si3, Re3, Le3, Mi3, Se3, Se3, Se3, Se3, Se3, Se3, So3, Ra3},
            {Do3, Do4, Do4, Do4, Do4, Do4, Do4, Fi3, La3, Me3, Fa3, Si3, Si3, Si3, Si3, Si3, Si3, Re3, Le3, Mi3, Se3, Se3, Se3, Se3, Se3, Se3, So3, Ra3},
            {Do3, Ra3, Ra3, Ra3, Ra3, Ra3, Ra3, Re3, Re3, Re3, Re3, Re3, Re3, Me3, Me3, Me3, Me3, Me3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
            {Do3, Ra3, Ra3, Ra3, Ra3, Ra3, Ra3, Re3, Re3, Re3, Re3, Re3, Re3, Me3, Me3, Me3, Me3, Me3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, So3, So3, So3, So3, So3, Le3, Le3, Le3, Le3, Le3, Le3, La3, La3, La3, La3, La3, La3, Se3, Si3, Do4},
            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, So3, So3, So3, So3, So3, Le3, Le3, Le3, Le3, Le3, Le3, La3, La3, La3, La3, La3, La3, Se3, Si3, Do4},
            {Do2, Do3, Fi2, La2, La2, La2, Me2, Fa2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2},
            {Do2, Do3, Fi2, La2, La2, La2, Me2, Fa2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2},
            {Do2, Do3, Fi2, La2, La2, La2, Me2, Fa2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2},
            {Do2, Do3, Fi2, La2, La2, La2, Me2, Fa2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2},
            {Do2, Do3, Fi2, La2, La2, La2, Me2, Fa2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2},
            {Do2, Do3, Fi2, La2, La2, La2, Me2, Fa2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2},
            {Do2, Do3, Fi2, La2, La2, La2, Me2, Fa2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2},
            {Do2, Do3, Fi2, La2, La2, La2, Me2, Fa2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2},
            {Do2, Do3, Fi2, La2, La2, La2, Me2, Fa2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2},
            {Do2, Do3, Fi2, La2, La2, La2, Me2, Fa2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2},
            {Do2, Do3, Fi2, La2, La2, La2, Me2, Fa2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2},
            {Do2, Do3, Fi2, La2, La2, La2, Me2, Fa2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2},
            {Do2, Do3, Fi2, La2, La2, La2, Me2, Fa2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2},
            {Do2, Do3, Fi2, La2, La2, La2, Me2, Fa2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2},
            {Do2, Do3, Fi2, La2, La2, La2, Me2, Fa2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2},
            {Do2, Do3, Fi2, La2, La2, La2, Me2, Fa2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2},
            {Do2, Do3, Fi2, La2, La2, La2, Me2, Fa2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2},
            {Do2, Do3, Fi2, La2, La2, La2, Me2, Fa2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2},
            {Do2, Do3, Fi2, La2, La2, La2, Me2, Fa2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2},
            {Do2, Do3, Fi2, La2, La2, La2, Me2, Fa2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2},
            {Do2, Do3, Fi2, La2, La2, La2, Me2, Fa2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2},
            {Do2, Do3, Fi2, La2, La2, La2, Me2, Fa2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2},
            {Do2, Do3, Fi2, La2, La2, La2, Me2, Fa2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2},
            {Do2, Do3, Fi2, La2, La2, La2, Me2, Fa2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2},
            {Do2, Do3, Fi2, La2, La2, La2, Me2, Fa2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2},
            {Do2, Do3, Fi2, La2, La2, La2, Me2, Fa2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2},
            {Do2, Do3, Fi2, La2, La2, La2, Me2, Fa2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2},
            {Do2, Do3, Fi2, La2, La2, La2, Me2, Fa2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2},
            {Do2, Do3, Fi2, La2, La2, La2, Me2, Fa2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2},
            {Do2, Do3, Fi2, La2, La2, La2, Me2, Fa2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2},
    }, pitchenga -> pitchenga.shuffleGroupSeries(false), new Integer[0]),
    Step30So2("Step 30: So2", new Pitch[][]{
            {Do3, Do4, Fi3, Fi3, Fi3, Fi3, Fi3, Fi3, La3, Me3, Fa3, Fa3, Fa3, Fa3, Fa3, Fa3, Si3, Re3, Le3, Mi3, Mi3, Mi3, Mi3, Mi3, Mi3, Se3, So3, Ra3},
            {Do3, Do4, Fi3, Fi3, Fi3, Fi3, Fi3, Fi3, La3, Me3, Fa3, Fa3, Fa3, Fa3, Fa3, Fa3, Si3, Re3, Le3, Mi3, Mi3, Mi3, Mi3, Mi3, Mi3, Se3, So3, Ra3},
            {Do3, Do4, Do4, Do4, Do4, Do4, Do4, Fi3, La3, Me3, Fa3, Si3, Si3, Si3, Si3, Si3, Si3, Re3, Le3, Mi3, Se3, Se3, Se3, Se3, Se3, Se3, So3, Ra3},
            {Do3, Do4, Do4, Do4, Do4, Do4, Do4, Fi3, La3, Me3, Fa3, Si3, Si3, Si3, Si3, Si3, Si3, Re3, Le3, Mi3, Se3, Se3, Se3, Se3, Se3, Se3, So3, Ra3},
            {Do3, Ra3, Ra3, Ra3, Ra3, Ra3, Ra3, Re3, Re3, Re3, Re3, Re3, Re3, Me3, Me3, Me3, Me3, Me3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
            {Do3, Ra3, Ra3, Ra3, Ra3, Ra3, Ra3, Re3, Re3, Re3, Re3, Re3, Re3, Me3, Me3, Me3, Me3, Me3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, So3, So3, So3, So3, So3, Le3, Le3, Le3, Le3, Le3, Le3, La3, La3, La3, La3, La3, La3, Se3, Si3, Do4},
            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, So3, So3, So3, So3, So3, Le3, Le3, Le3, Le3, Le3, Le3, La3, La3, La3, La3, La3, La3, Se3, Si3, Do4},
            {Do2, Do3, Fi2, Fi2, Fi2, La2, Me2, Fa2, Si2, Re2, Le2, Le2, Le2, Mi2, Se2, So2, So2, So2, So2, So2},
            {Do2, Do3, Fi2, Fi2, Fi2, La2, Me2, Fa2, Si2, Re2, Le2, Le2, Le2, Mi2, Se2, So2, So2, So2, So2, So2},
            {Do2, Do3, Fi2, Fi2, Fi2, La2, Me2, Fa2, Si2, Re2, Le2, Le2, Le2, Mi2, Se2, So2, So2, So2, So2, So2},
            {Do2, Do3, Fi2, Fi2, Fi2, La2, Me2, Fa2, Si2, Re2, Le2, Le2, Le2, Mi2, Se2, So2, So2, So2, So2, So2},
            {Do2, Do3, Fi2, Fi2, Fi2, La2, Me2, Fa2, Si2, Re2, Le2, Le2, Le2, Mi2, Se2, So2, So2, So2, So2, So2},
            {Do2, Do3, Fi2, Fi2, Fi2, La2, Me2, Fa2, Si2, Re2, Le2, Le2, Le2, Mi2, Se2, So2, So2, So2, So2, So2},
            {Do2, Do3, Fi2, Fi2, Fi2, La2, Me2, Fa2, Si2, Re2, Le2, Le2, Le2, Mi2, Se2, So2, So2, So2, So2, So2},
            {Do2, Do3, Fi2, Fi2, Fi2, La2, Me2, Fa2, Si2, Re2, Le2, Le2, Le2, Mi2, Se2, So2, So2, So2, So2, So2},
            {Do2, Do3, Fi2, Fi2, Fi2, La2, Me2, Fa2, Si2, Re2, Le2, Le2, Le2, Mi2, Se2, So2, So2, So2, So2, So2},
            {Do2, Do3, Fi2, Fi2, Fi2, La2, Me2, Fa2, Si2, Re2, Le2, Le2, Le2, Mi2, Se2, So2, So2, So2, So2, So2},
            {Do2, Do3, Fi2, Fi2, Fi2, La2, Me2, Fa2, Si2, Re2, Le2, Le2, Le2, Mi2, Se2, So2, So2, So2, So2, So2},
            {Do2, Do3, Fi2, Fi2, Fi2, La2, Me2, Fa2, Si2, Re2, Le2, Le2, Le2, Mi2, Se2, So2, So2, So2, So2, So2},
            {Do2, Do3, Fi2, Fi2, Fi2, La2, Me2, Fa2, Si2, Re2, Le2, Le2, Le2, Mi2, Se2, So2, So2, So2, So2, So2},
            {Do2, Do3, Fi2, Fi2, Fi2, La2, Me2, Fa2, Si2, Re2, Le2, Le2, Le2, Mi2, Se2, So2, So2, So2, So2, So2},
            {Do2, Do3, Fi2, Fi2, Fi2, La2, Me2, Fa2, Si2, Re2, Le2, Le2, Le2, Mi2, Se2, So2, So2, So2, So2, So2},
            {Do2, Do3, Fi2, Fi2, Fi2, La2, Me2, Fa2, Si2, Re2, Le2, Le2, Le2, Mi2, Se2, So2, So2, So2, So2, So2},
            {Do2, Do3, Fi2, Fi2, Fi2, La2, Me2, Fa2, Si2, Re2, Le2, Le2, Le2, Mi2, Se2, So2, So2, So2, So2, So2},
            {Do2, Do3, Fi2, Fi2, Fi2, La2, Me2, Fa2, Si2, Re2, Le2, Le2, Le2, Mi2, Se2, So2, So2, So2, So2, So2},
            {Do2, Do3, Fi2, Fi2, Fi2, La2, Me2, Fa2, Si2, Re2, Le2, Le2, Le2, Mi2, Se2, So2, So2, So2, So2, So2},
            {Do2, Do3, Fi2, Fi2, Fi2, La2, Me2, Fa2, Si2, Re2, Le2, Le2, Le2, Mi2, Se2, So2, So2, So2, So2, So2},
            {Do2, Do3, Fi2, Fi2, Fi2, La2, Me2, Fa2, Si2, Re2, Le2, Le2, Le2, Mi2, Se2, So2, So2, So2, So2, So2},
            {Do2, Do3, Fi2, Fi2, Fi2, La2, Me2, Fa2, Si2, Re2, Le2, Le2, Le2, Mi2, Se2, So2, So2, So2, So2, So2},
            {Do2, Do3, Fi2, Fi2, Fi2, La2, Me2, Fa2, Si2, Re2, Le2, Le2, Le2, Mi2, Se2, So2, So2, So2, So2, So2},
            {Do2, Do3, Fi2, Fi2, Fi2, La2, Me2, Fa2, Si2, Re2, Le2, Le2, Le2, Mi2, Se2, So2, So2, So2, So2, So2},
            {Do2, Do3, Fi2, Fi2, Fi2, La2, Me2, Fa2, Si2, Re2, Le2, Le2, Le2, Mi2, Se2, So2, So2, So2, So2, So2},
            {Do2, Do3, Fi2, Fi2, Fi2, La2, Me2, Fa2, Si2, Re2, Le2, Le2, Le2, Mi2, Se2, So2, So2, So2, So2, So2},
            {Do2, Do3, Fi2, Fi2, Fi2, La2, Me2, Fa2, Si2, Re2, Le2, Le2, Le2, Mi2, Se2, So2, So2, So2, So2, So2},
            {Do2, Do3, Fi2, Fi2, Fi2, La2, Me2, Fa2, Si2, Re2, Le2, Le2, Le2, Mi2, Se2, So2, So2, So2, So2, So2},
            {Do2, Do3, Fi2, Fi2, Fi2, La2, Me2, Fa2, Si2, Re2, Le2, Le2, Le2, Mi2, Se2, So2, So2, So2, So2, So2},
            {Do2, Do3, Fi2, Fi2, Fi2, La2, Me2, Fa2, Si2, Re2, Le2, Le2, Le2, Mi2, Se2, So2, So2, So2, So2, So2},
    }, pitchenga -> pitchenga.shuffleGroupSeries(false), new Integer[0]),
    Step31Ra2("Step 31: Ra2", new Pitch[][]{
            {Do3, Do4, Fi3, Fi3, Fi3, Fi3, Fi3, Fi3, La3, Me3, Fa3, Fa3, Fa3, Fa3, Fa3, Fa3, Si3, Re3, Le3, Mi3, Mi3, Mi3, Mi3, Mi3, Mi3, Se3, So3, Ra3},
            {Do3, Do4, Fi3, Fi3, Fi3, Fi3, Fi3, Fi3, La3, Me3, Fa3, Fa3, Fa3, Fa3, Fa3, Fa3, Si3, Re3, Le3, Mi3, Mi3, Mi3, Mi3, Mi3, Mi3, Se3, So3, Ra3},
            {Do3, Do4, Do4, Do4, Do4, Do4, Do4, Fi3, La3, Me3, Fa3, Si3, Si3, Si3, Si3, Si3, Si3, Re3, Le3, Mi3, Se3, Se3, Se3, Se3, Se3, Se3, So3, Ra3},
            {Do3, Do4, Do4, Do4, Do4, Do4, Do4, Fi3, La3, Me3, Fa3, Si3, Si3, Si3, Si3, Si3, Si3, Re3, Le3, Mi3, Se3, Se3, Se3, Se3, Se3, Se3, So3, Ra3},
            {Do3, Ra3, Ra3, Ra3, Ra3, Ra3, Ra3, Re3, Re3, Re3, Re3, Re3, Re3, Me3, Me3, Me3, Me3, Me3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
            {Do3, Ra3, Ra3, Ra3, Ra3, Ra3, Ra3, Re3, Re3, Re3, Re3, Re3, Re3, Me3, Me3, Me3, Me3, Me3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, So3, So3, So3, So3, So3, Le3, Le3, Le3, Le3, Le3, Le3, La3, La3, La3, La3, La3, La3, Se3, Si3, Do4},
            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, So3, So3, So3, So3, So3, Le3, Le3, Le3, Le3, Le3, Le3, La3, La3, La3, La3, La3, La3, Se3, Si3, Do4},
            {Do2, Do2, Do2, Do3, Fi2, La2, Me2, Fa2, Si2, Re2, Re2, Re2, Re2, Le2, Mi2, Se2, So2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2},
            {Do2, Do2, Do2, Do3, Fi2, La2, Me2, Fa2, Si2, Re2, Re2, Re2, Re2, Le2, Mi2, Se2, So2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2},
            {Do2, Do2, Do2, Do3, Fi2, La2, Me2, Fa2, Si2, Re2, Re2, Re2, Re2, Le2, Mi2, Se2, So2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2},
            {Do2, Do2, Do2, Do3, Fi2, La2, Me2, Fa2, Si2, Re2, Re2, Re2, Re2, Le2, Mi2, Se2, So2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2},
            {Do2, Do2, Do2, Do3, Fi2, La2, Me2, Fa2, Si2, Re2, Re2, Re2, Re2, Le2, Mi2, Se2, So2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2},
            {Do2, Do2, Do2, Do3, Fi2, La2, Me2, Fa2, Si2, Re2, Re2, Re2, Re2, Le2, Mi2, Se2, So2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2},
            {Do2, Do2, Do2, Do3, Fi2, La2, Me2, Fa2, Si2, Re2, Re2, Re2, Re2, Le2, Mi2, Se2, So2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2},
            {Do2, Do2, Do2, Do3, Fi2, La2, Me2, Fa2, Si2, Re2, Re2, Re2, Re2, Le2, Mi2, Se2, So2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2},
            {Do2, Do2, Do2, Do3, Fi2, La2, Me2, Fa2, Si2, Re2, Re2, Re2, Re2, Le2, Mi2, Se2, So2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2},
            {Do2, Do2, Do2, Do3, Fi2, La2, Me2, Fa2, Si2, Re2, Re2, Re2, Re2, Le2, Mi2, Se2, So2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2},
            {Do2, Do2, Do2, Do3, Fi2, La2, Me2, Fa2, Si2, Re2, Re2, Re2, Re2, Le2, Mi2, Se2, So2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2},
            {Do2, Do2, Do2, Do3, Fi2, La2, Me2, Fa2, Si2, Re2, Re2, Re2, Re2, Le2, Mi2, Se2, So2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2},
            {Do2, Do2, Do2, Do3, Fi2, La2, Me2, Fa2, Si2, Re2, Re2, Re2, Re2, Le2, Mi2, Se2, So2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2},
            {Do2, Do2, Do2, Do3, Fi2, La2, Me2, Fa2, Si2, Re2, Re2, Re2, Re2, Le2, Mi2, Se2, So2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2},
            {Do2, Do2, Do2, Do3, Fi2, La2, Me2, Fa2, Si2, Re2, Re2, Re2, Re2, Le2, Mi2, Se2, So2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2},
            {Do2, Do2, Do2, Do3, Fi2, La2, Me2, Fa2, Si2, Re2, Re2, Re2, Re2, Le2, Mi2, Se2, So2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2},
            {Do2, Do2, Do2, Do3, Fi2, La2, Me2, Fa2, Si2, Re2, Re2, Re2, Re2, Le2, Mi2, Se2, So2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2},
            {Do2, Do2, Do2, Do3, Fi2, La2, Me2, Fa2, Si2, Re2, Re2, Re2, Re2, Le2, Mi2, Se2, So2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2},
            {Do2, Do2, Do2, Do3, Fi2, La2, Me2, Fa2, Si2, Re2, Re2, Re2, Re2, Le2, Mi2, Se2, So2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2},
            {Do2, Do2, Do2, Do3, Fi2, La2, Me2, Fa2, Si2, Re2, Re2, Re2, Re2, Le2, Mi2, Se2, So2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2},
            {Do2, Do2, Do2, Do3, Fi2, La2, Me2, Fa2, Si2, Re2, Re2, Re2, Re2, Le2, Mi2, Se2, So2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2},
            {Do2, Do2, Do2, Do3, Fi2, La2, Me2, Fa2, Si2, Re2, Re2, Re2, Re2, Le2, Mi2, Se2, So2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2},
            {Do2, Do2, Do2, Do3, Fi2, La2, Me2, Fa2, Si2, Re2, Re2, Re2, Re2, Le2, Mi2, Se2, So2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2},
            {Do2, Do2, Do2, Do3, Fi2, La2, Me2, Fa2, Si2, Re2, Re2, Re2, Re2, Le2, Mi2, Se2, So2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2},
            {Do2, Do2, Do2, Do3, Fi2, La2, Me2, Fa2, Si2, Re2, Re2, Re2, Re2, Le2, Mi2, Se2, So2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2},
            {Do2, Do2, Do2, Do3, Fi2, La2, Me2, Fa2, Si2, Re2, Re2, Re2, Re2, Le2, Mi2, Se2, So2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2},
            {Do2, Do2, Do2, Do3, Fi2, La2, Me2, Fa2, Si2, Re2, Re2, Re2, Re2, Le2, Mi2, Se2, So2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2},
            {Do2, Do2, Do2, Do3, Fi2, La2, Me2, Fa2, Si2, Re2, Re2, Re2, Re2, Le2, Mi2, Se2, So2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2},
            {Do2, Do2, Do2, Do3, Fi2, La2, Me2, Fa2, Si2, Re2, Re2, Re2, Re2, Le2, Mi2, Se2, So2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2},
            {Do2, Do2, Do2, Do3, Fi2, La2, Me2, Fa2, Si2, Re2, Re2, Re2, Re2, Le2, Mi2, Se2, So2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2},
    }, pitchenga -> pitchenga.shuffleGroupSeries(false), new Integer[0]),
    Step32Octaves2And3("Step 32: Octaves 2 and 3", new Pitch[][]{
            {Do3, Do4, Fi3, Fi3, Fi3, Fi3, Fi3, Fi3, La3, Me3, Fa3, Fa3, Fa3, Fa3, Fa3, Fa3, Si3, Re3, Le3, Mi3, Mi3, Mi3, Mi3, Mi3, Mi3, Se3, So3, Ra3},
            {Do3, Do4, Fi3, Fi3, Fi3, Fi3, Fi3, Fi3, La3, Me3, Fa3, Fa3, Fa3, Fa3, Fa3, Fa3, Si3, Re3, Le3, Mi3, Mi3, Mi3, Mi3, Mi3, Mi3, Se3, So3, Ra3},
            {Do3, Do4, Do4, Do4, Do4, Do4, Do4, Fi3, La3, Me3, Fa3, Si3, Si3, Si3, Si3, Si3, Si3, Re3, Le3, Mi3, Se3, Se3, Se3, Se3, Se3, Se3, So3, Ra3},
            {Do3, Do4, Do4, Do4, Do4, Do4, Do4, Fi3, La3, Me3, Fa3, Si3, Si3, Si3, Si3, Si3, Si3, Re3, Le3, Mi3, Se3, Se3, Se3, Se3, Se3, Se3, So3, Ra3},
            {Do3, Ra3, Ra3, Ra3, Ra3, Ra3, Ra3, Re3, Re3, Re3, Re3, Re3, Re3, Me3, Me3, Me3, Me3, Me3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
            {Do3, Ra3, Ra3, Ra3, Ra3, Ra3, Ra3, Re3, Re3, Re3, Re3, Re3, Re3, Me3, Me3, Me3, Me3, Me3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, So3, So3, So3, So3, So3, Le3, Le3, Le3, Le3, Le3, Le3, La3, La3, La3, La3, La3, La3, Se3, Si3, Do4},
            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, So3, So3, So3, So3, So3, Le3, Le3, Le3, Le3, Le3, Le3, La3, La3, La3, La3, La3, La3, Se3, Si3, Do4},
            {Do2, Do3, Fi2, Fi2, Fi2, Fi2, Fi2, Fi2, La2, Me2, Fa2, Fa2, Fa2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2, Mi2, Mi2, Se2, So2, Ra2},
            {Do2, Do3, Fi2, Fi2, Fi2, Fi2, Fi2, Fi2, La2, Me2, Fa2, Fa2, Fa2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2, Mi2, Mi2, Se2, So2, Ra2},
            {Do2, Do3, Do3, Do3, Do3, Do3, Do3, Fi2, La2, Me2, Fa2, Si2, Si2, Si2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2, Se2, So2, Ra2},
            {Do2, Do3, Do3, Do3, Do3, Do3, Do3, Fi2, La2, Me2, Fa2, Si2, Si2, Si2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2, Se2, So2, Ra2},
            {Do2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2, Re2, Re2, Re2, Re2, Re2, Re2, Me2, Me2, Me2, Me2, Me2, Me2, Mi2, Fa2, Fi2, So2, Le2, La2, Se2, Si2, Do3},
            {Do2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2, Re2, Re2, Re2, Re2, Re2, Re2, Me2, Me2, Me2, Me2, Me2, Me2, Mi2, Fa2, Fi2, So2, Le2, La2, Se2, Si2, Do3},
            {Do2, Ra2, Re2, Me2, Mi2, Fa2, Fi2, So2, So2, So2, So2, So2, So2, Le2, Le2, Le2, Le2, Le2, Le2, La2, La2, La2, La2, La2, La2, Se2, Si2, Do3},
            {Do2, Ra2, Re2, Me2, Mi2, Fa2, Fi2, So2, So2, So2, So2, So2, So2, Le2, Le2, Le2, Le2, Le2, Le2, La2, La2, La2, La2, La2, La2, Se2, Si2, Do3},
            {Do2, Do3, Fi2, Fi2, Fi2, Fi2, Fi2, Fi2, La2, Me2, Fa2, Fa2, Fa2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2, Mi2, Mi2, Se2, So2, Ra2},
            {Do2, Do3, Fi2, Fi2, Fi2, Fi2, Fi2, Fi2, La2, Me2, Fa2, Fa2, Fa2, Fa2, Fa2, Fa2, Si2, Re2, Le2, Mi2, Mi2, Mi2, Mi2, Mi2, Mi2, Se2, So2, Ra2},
            {Do2, Do3, Do3, Do3, Do3, Do3, Do3, Fi2, La2, Me2, Fa2, Si2, Si2, Si2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2, Se2, So2, Ra2},
            {Do2, Do3, Do3, Do3, Do3, Do3, Do3, Fi2, La2, Me2, Fa2, Si2, Si2, Si2, Si2, Si2, Si2, Re2, Le2, Mi2, Se2, Se2, Se2, Se2, Se2, Se2, So2, Ra2},
            {Do2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2, Re2, Re2, Re2, Re2, Re2, Re2, Me2, Me2, Me2, Me2, Me2, Me2, Mi2, Fa2, Fi2, So2, Le2, La2, Se2, Si2, Do3},
            {Do2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2, Re2, Re2, Re2, Re2, Re2, Re2, Me2, Me2, Me2, Me2, Me2, Me2, Mi2, Fa2, Fi2, So2, Le2, La2, Se2, Si2, Do3},
            {Do2, Ra2, Re2, Me2, Mi2, Fa2, Fi2, So2, So2, So2, So2, So2, So2, Le2, Le2, Le2, Le2, Le2, Le2, La2, La2, La2, La2, La2, La2, Se2, Si2, Do3},
            {Do2, Ra2, Re2, Me2, Mi2, Fa2, Fi2, So2, So2, So2, So2, So2, So2, Le2, Le2, Le2, Le2, Le2, Le2, La2, La2, La2, La2, La2, La2, Se2, Si2, Do3},
    }, pitchenga -> pitchenga.shuffleGroupSeries(false), new Integer[0]),
    Step33Octaves2And3RaRe("Step 33: Octaves 2 and 3 - Ra and Re", new Pitch[][]{
            {Do3, Ra3, Ra3, Ra3, Ra3, Ra3, Ra3, Re3, Re3, Re3, Re3, Re3, Re3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
            {Do2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2, Re2, Re2, Re2, Re2, Re2, Re2, Me2, Mi2, Fa2, Fi2, So2, Le2, La2, Se2, Si2, Do3},
            {Do2, Ra2, Ra2, Ra2, Ra2, Ra2, Ra2, Re2, Re2, Re2, Re2, Re2, Re2, Me2, Mi2, Fa2, Fi2, So2, Le2, La2, Se2, Si2, Do3},
    }, pitchenga -> pitchenga.shuffleGroupSeries(true), new Integer[0]),


//    Step21Octaves3And4Grouped("Step 21a: Octaves 3 and 4 grouped", new Pitch[][]{
//            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
//            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
//            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
//            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
//            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
//            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
//            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
//            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
//            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
//            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
//            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
//            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
//            {Do4, Ra4, Re4, Me4, Mi4, Fa4, Fi4, So4, Le4, La4, Se4, Si4, Do5},
//            {Do4, Ra4, Re4, Me4, Mi4, Fa4, Fi4, So4, Le4, La4, Se4, Si4, Do5},
//            {Do4, Ra4, Re4, Me4, Mi4, Fa4, Fi4, So4, Le4, La4, Se4, Si4, Do5},
//            {Do4, Ra4, Re4, Me4, Mi4, Fa4, Fi4, So4, Le4, La4, Se4, Si4, Do5},
//            {Do4, Ra4, Re4, Me4, Mi4, Fa4, Fi4, So4, Le4, La4, Se4, Si4, Do5},
//            {Do4, Ra4, Re4, Me4, Mi4, Fa4, Fi4, So4, Le4, La4, Se4, Si4, Do5},
//            {Do4, Ra4, Re4, Me4, Mi4, Fa4, Fi4, So4, Le4, La4, Se4, Si4, Do5},
//            {Do4, Ra4, Re4, Me4, Mi4, Fa4, Fi4, So4, Le4, La4, Se4, Si4, Do5},
//            {Do4, Ra4, Re4, Me4, Mi4, Fa4, Fi4, So4, Le4, La4, Se4, Si4, Do5},
//            {Do4, Ra4, Re4, Me4, Mi4, Fa4, Fi4, So4, Le4, La4, Se4, Si4, Do5},
//            {Do4, Ra4, Re4, Me4, Mi4, Fa4, Fi4, So4, Le4, La4, Se4, Si4, Do5},
//            {Do4, Ra4, Re4, Me4, Mi4, Fa4, Fi4, So4, Le4, La4, Se4, Si4, Do5},
//    }, pitchenga -> pitchenga.shuffleGroupSeries(false), new Integer[0]),
//    Step21Octaves3And4("Step 21b: Octaves 3 and 4 shuffled", new Pitch[][]{
//            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
//            {Do4, Ra4, Re4, Me4, Mi4, Fa4, Fi4, So4, Le4, La4, Se4, Si4, Do5},
//    }, pitchenga -> pitchenga.shuffleGroupSeries(true), new Integer[0]),
//    Step22Octave5("Step 22: Octave 5",
//            new Pitch[][]{{Do5, Ra5, Re5, Me5, Mi5, Fa5, Fi5, So5, Le5, La5, Se5, Si5, Do6}}, Pitchenga::shuffle, new Integer[0]),
//    Step23Octaves3And4And5("Step 23: Octaves 3, 4, 5", new Pitch[][]{
//            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
//            {Do4, Ra4, Re4, Me4, Mi4, Fa4, Fi4, So4, Le4, La4, Se4, Si4, Do5},
//            {Do5, Ra5, Re5, Me5, Mi5, Fa5, Fi5, So5, Le5, La5, Se5, Si5, Do6},
//    }, pitchenga -> pitchenga.shuffleGroupSeries(true), new Integer[0]),
//    Step24Octave2("Step 24: Octave 2",
//            new Pitch[][]{{Do2, Ra2, Re2, Me2, Mi2, Fa2, Fi2, So2, Le2, La2, Se2, Si2, Do3}}, Pitchenga::shuffle, new Integer[0]),
//    Step25Octaves2And3And4And5("Step 23: Octaves 2, 3, 4, 5", new Pitch[][]{
//            {Do2, Ra2, Re2, Me2, Mi2, Fa2, Fi2, So2, Le2, La2, Se2, Si2, Do3},
//            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
//            {Do4, Ra4, Re4, Me4, Mi4, Fa4, Fi4, So4, Le4, La4, Se4, Si4, Do5},
//            {Do5, Ra5, Re5, Me5, Mi5, Fa5, Fi5, So5, Le5, La5, Se5, Si5, Do6},
//    }, pitchenga -> pitchenga.shuffleGroupSeries(true), new Integer[0]),
//    Step26Octave2("Step 26: Octave 6",
//            new Pitch[][]{{Do6, Ra6, Re6, Me6, Mi6, Fa6, Fi6, So6, Le6, La6, Se6, Si6, Do6}}, Pitchenga::shuffle, new Integer[0]),
//    Step27Octaves2And3And4And5And6("Step 23: Octaves 2, 3, 4, 5, 6", new Pitch[][]{
//            {Do2, Ra2, Re2, Me2, Mi2, Fa2, Fi2, So2, Le2, La2, Se2, Si2, Do3},
//            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
//            {Do4, Ra4, Re4, Me4, Mi4, Fa4, Fi4, So4, Le4, La4, Se4, Si4, Do5},
//            {Do5, Ra5, Re5, Me5, Mi5, Fa5, Fi5, So5, Le5, La5, Se5, Si5, Do6},
//            {Do6, Ra6, Re6, Me6, Mi6, Fa6, Fi6, So6, Le6, La6, Se6, Si6, Do6},
//    }, pitchenga -> pitchenga.shuffleGroupSeries(true), new Integer[0]),
//    Step28Octave2("Step 28: Octave 1",
//            new Pitch[][]{{Do1, Ra1, Re1, Me1, Mi1, Fa1, Fi1, So1, Le1, La1, Se1, Si1, Do2}}, Pitchenga::shuffle, new Integer[0]),
//    Step29Octaves1And2And3And4And5And6("Step 20: Octaves 1, 2, 3, 4, 5, 6", new Pitch[][]{
//            {Do1, Ra1, Re1, Me1, Mi1, Fa1, Fi1, So1, Le1, La1, Se1, Si1, Do2},
//            {Do2, Ra2, Re2, Me2, Mi2, Fa2, Fi2, So2, Le2, La2, Se2, Si2, Do3},
//            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
//            {Do4, Ra4, Re4, Me4, Mi4, Fa4, Fi4, So4, Le4, La4, Se4, Si4, Do5},
//            {Do5, Ra5, Re5, Me5, Mi5, Fa5, Fi5, So5, Le5, La5, Se5, Si5, Do6},
//            {Do6, Ra6, Re6, Me6, Mi6, Fa6, Fi6, So6, Le6, La6, Se6, Si6, Do6},
//    }, pitchenga -> pitchenga.shuffleGroupSeries(true), new Integer[0]),
//    Step30Octave7("Step 30: Octave 7",
//            new Pitch[][]{{Do7, Ra7, Re7, Me7, Mi7, Fa7, Fi7, So7, Le7, La7, Se7, Si7, Do8}}, Pitchenga::shuffle, new Integer[0]),
//    Step31Octaves1And2And3And4And5And6And7("Step 31: Octaves 1, 2, 3, 4, 5, 6, 7", new Pitch[][]{
//            {Do1, Ra1, Re1, Me1, Mi1, Fa1, Fi1, So1, Le1, La1, Se1, Si1, Do2},
//            {Do2, Ra2, Re2, Me2, Mi2, Fa2, Fi2, So2, Le2, La2, Se2, Si2, Do3},
//            {Do3, Ra3, Re3, Me3, Mi3, Fa3, Fi3, So3, Le3, La3, Se3, Si3, Do4},
//            {Do4, Ra4, Re4, Me4, Mi4, Fa4, Fi4, So4, Le4, La4, Se4, Si4, Do5},
//            {Do5, Ra5, Re5, Me5, Mi5, Fa5, Fi5, So5, Le5, La5, Se5, Si5, Do6},
//            {Do6, Ra6, Re6, Me6, Mi6, Fa6, Fi6, So6, Le6, La6, Se6, Si6, Do6},
//            {Do7, Ra7, Re7, Me7, Mi7, Fa7, Fi7, So7, Le7, La7, Se7, Si7, Do8},
//    }, pitchenga -> pitchenga.shuffleGroupSeries(true), new Integer[0]),
    ;

    private final String name;
    public final Pitch[][] scale;
    public final Function<Pitchenga, List<Pitch>> riddle;
    public final Integer[] octaves;

    Riddler(String name, Pitch[][] scale, Function<Pitchenga, List<Pitch>> riddle, Integer[] octaves) {
        this.name = name;
        this.scale = scale;
        this.riddle = riddle;
        this.octaves = octaves;
    }

    public String toString() {
        return name;
    }
}
